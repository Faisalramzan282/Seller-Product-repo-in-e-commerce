{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from \"vuex\";\n// import VuexPersist from 'vuex-persistedstate';\n\nexport default createStore({\n  state: {\n    userData: [],\n    tasks: [],\n    addToCarts: [],\n    cartsCount: []\n  },\n  mutations: {\n    CREATE_USER(state, payload) {\n      state.userData = payload;\n    },\n    CREATE_TASKS(state, task) {\n      state.userData.push(task);\n    },\n    CREATE_TASK_USER(state, formData) {\n      state.tasks.push(formData);\n    },\n    ATT_TO_CART(state, payload) {\n      state.addToCarts.push(payload);\n      // console.log(\"cards object in store mutations ===>\", state.addToCarts);\n      // console.log(\"cards object in store mutations ===>\", state.addToCarts);\n    },\n\n    ADD_CARTS_COUNT(state, payload) {\n      let matchedInd = state.addToCarts.findIndex(obj => obj.id === payload.id);\n      console.log(\"match index is ==>\", matchedInd);\n      if (matchedInd !== -1) {\n        if (!isNaN(payload.count)) {\n          if (!isNaN(state.addToCarts[matchedInd].count)) {\n            // Update the count property\n            state.addToCarts[matchedInd].count = state.addToCarts[matchedInd].count + payload.count;\n          } else {\n            state.addToCarts[matchedInd].count = payload.count; // Initialize if not a number\n            console.log(\"payload count====>\");\n          }\n          console.log(\"updated count is ==>\", state.addToCarts[matchedInd].count);\n        }\n      } else {\n        state.addToCarts.push(payload);\n      }\n\n      // console.log(\"Updated addToCarts array:\", state.addToCarts);\n\n      // console.log(\"Updated addToCarts array:\", state.addToCarts);\n      // console.log(\"payload is ==>\", payload);\n      // console.log(\"add to carts is ==>\", state.addToCarts);\n    }\n  },\n\n  actions: {\n    createUser({\n      commit\n    }, form) {\n      commit(\"CREATE_USER\", form);\n      console.log(form.password);\n      localStorage.setItem(\"userEmail\", form.email);\n      localStorage.setItem(\"userPassword\", form.password);\n      // console.log(userData);\n    },\n\n    validateUser({\n      commit\n    }, loginForm) {\n      commit(\"CREATE_USER\", loginForm);\n    },\n    createTask({\n      commit\n    }, form) {\n      commit(\"CREATE_TASK_USER\", form);\n      // localStorage.setItem('formTasks', this.state.tasks);\n      // console.log(localStorage.getItem('formTasks'))\n    },\n\n    updateTask(_, {\n      id,\n      payload\n    }) {\n      // console.log(\"payload in store\", payload);\n      // console.log(\"id in store\", id);\n      this.state.tasks.splice(id, 1, payload);\n    },\n    addToCart({\n      commit\n    }, payload) {\n      commit(\"ATT_TO_CART\", payload);\n      //  console.log(\"payload from action\", payload)\n    },\n\n    cartsCount({\n      commit\n    }, payload) {\n      console.log(\"action called in payload \", payload);\n      commit(\"ADD_CARTS_COUNT\", payload);\n      //  console.log(\"count in store is ==>\", count)\n    }\n  },\n\n  getters: {\n    getUser(state) {\n      return state.userData;\n    },\n    getTasks(state) {\n      return state.tasks;\n    },\n    getCarts(state) {\n      return state.addToCarts;\n    },\n    getCartsCount(state) {\n      return state.cartsCount;\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","userData","tasks","addToCarts","cartsCount","mutations","CREATE_USER","payload","CREATE_TASKS","task","push","CREATE_TASK_USER","formData","ATT_TO_CART","ADD_CARTS_COUNT","matchedInd","findIndex","obj","id","console","log","isNaN","count","actions","createUser","commit","form","password","localStorage","setItem","email","validateUser","loginForm","createTask","updateTask","_","splice","addToCart","getters","getUser","getTasks","getCarts","getCartsCount"],"sources":["D:/Data/Web Development/TECNIQE/15_CRUD_Cart_IN VUE JS/PRODUCT_CRUD_OPERATION/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\n// import VuexPersist from 'vuex-persistedstate';\n\nexport default createStore({\n  state: {\n    userData: [],\n    tasks: [],\n    addToCarts: [],\n    cartsCount: [],\n  },\n\n  mutations: {\n    CREATE_USER(state, payload) {\n      state.userData = payload;\n    },\n    CREATE_TASKS(state, task) {\n      state.userData.push(task);\n    },\n    CREATE_TASK_USER(state, formData) {\n      state.tasks.push(formData);\n    },\n    ATT_TO_CART(state, payload) {\n      state.addToCarts.push(payload);\n      // console.log(\"cards object in store mutations ===>\", state.addToCarts);\n      // console.log(\"cards object in store mutations ===>\", state.addToCarts);\n    },\n    ADD_CARTS_COUNT(state, payload) {\n      let matchedInd = state.addToCarts.findIndex(\n        (obj) => obj.id === payload.id\n      );\n      console.log(\"match index is ==>\", matchedInd);\n      if (matchedInd !== -1) {\n        if (!isNaN(payload.count)) {\n          if (!isNaN(state.addToCarts[matchedInd].count)) {\n            // Update the count property\n              state.addToCarts[matchedInd].count =\n              state.addToCarts[matchedInd].count + payload.count;\n          } else {\n            state.addToCarts[matchedInd].count = payload.count; // Initialize if not a number\n            console.log(\"payload count====>\", )\n          }\n          console.log(\n            \"updated count is ==>\",\n            state.addToCarts[matchedInd].count\n          );\n        }\n      } else {\n        state.addToCarts.push(payload);\n      }\n\n      // console.log(\"Updated addToCarts array:\", state.addToCarts);\n\n      // console.log(\"Updated addToCarts array:\", state.addToCarts);\n      // console.log(\"payload is ==>\", payload);\n      // console.log(\"add to carts is ==>\", state.addToCarts);\n    },\n  },\n  actions: {\n    createUser({ commit }, form) {\n      commit(\"CREATE_USER\", form);\n      console.log(form.password);\n      localStorage.setItem(\"userEmail\", form.email);\n      localStorage.setItem(\"userPassword\", form.password);\n      // console.log(userData);\n    },\n    validateUser({ commit }, loginForm) {\n      commit(\"CREATE_USER\", loginForm);\n    },\n\n    createTask({ commit }, form) {\n      commit(\"CREATE_TASK_USER\", form);\n      // localStorage.setItem('formTasks', this.state.tasks);\n      // console.log(localStorage.getItem('formTasks'))\n    },\n    updateTask(_, { id, payload }) {\n      // console.log(\"payload in store\", payload);\n      // console.log(\"id in store\", id);\n      this.state.tasks.splice(id, 1, payload);\n    },\n    addToCart({ commit }, payload) {\n      commit(\"ATT_TO_CART\", payload);\n      //  console.log(\"payload from action\", payload)\n    },\n    cartsCount({ commit }, payload) {\n      console.log(\"action called in payload \", payload);\n      commit(\"ADD_CARTS_COUNT\", payload);\n      //  console.log(\"count in store is ==>\", count)\n    },\n  },\n  getters: {\n    getUser(state) {\n      return state.userData;\n    },\n    getTasks(state) {\n      return state.tasks;\n    },\n    getCarts(state) {\n      return state.addToCarts;\n    },\n    getCartsCount(state) {\n      return state.cartsCount;\n    },\n  },\n});\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC;;AAEA,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE;EACd,CAAC;EAEDC,SAAS,EAAE;IACTC,WAAWA,CAACN,KAAK,EAAEO,OAAO,EAAE;MAC1BP,KAAK,CAACC,QAAQ,GAAGM,OAAO;IAC1B,CAAC;IACDC,YAAYA,CAACR,KAAK,EAAES,IAAI,EAAE;MACxBT,KAAK,CAACC,QAAQ,CAACS,IAAI,CAACD,IAAI,CAAC;IAC3B,CAAC;IACDE,gBAAgBA,CAACX,KAAK,EAAEY,QAAQ,EAAE;MAChCZ,KAAK,CAACE,KAAK,CAACQ,IAAI,CAACE,QAAQ,CAAC;IAC5B,CAAC;IACDC,WAAWA,CAACb,KAAK,EAAEO,OAAO,EAAE;MAC1BP,KAAK,CAACG,UAAU,CAACO,IAAI,CAACH,OAAO,CAAC;MAC9B;MACA;IACF,CAAC;;IACDO,eAAeA,CAACd,KAAK,EAAEO,OAAO,EAAE;MAC9B,IAAIQ,UAAU,GAAGf,KAAK,CAACG,UAAU,CAACa,SAAS,CACxCC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKX,OAAO,CAACW,EAC9B,CAAC;MACDC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEL,UAAU,CAAC;MAC7C,IAAIA,UAAU,KAAK,CAAC,CAAC,EAAE;QACrB,IAAI,CAACM,KAAK,CAACd,OAAO,CAACe,KAAK,CAAC,EAAE;UACzB,IAAI,CAACD,KAAK,CAACrB,KAAK,CAACG,UAAU,CAACY,UAAU,CAAC,CAACO,KAAK,CAAC,EAAE;YAC9C;YACEtB,KAAK,CAACG,UAAU,CAACY,UAAU,CAAC,CAACO,KAAK,GAClCtB,KAAK,CAACG,UAAU,CAACY,UAAU,CAAC,CAACO,KAAK,GAAGf,OAAO,CAACe,KAAK;UACtD,CAAC,MAAM;YACLtB,KAAK,CAACG,UAAU,CAACY,UAAU,CAAC,CAACO,KAAK,GAAGf,OAAO,CAACe,KAAK,CAAC,CAAC;YACpDH,OAAO,CAACC,GAAG,CAAC,oBAAsB,CAAC;UACrC;UACAD,OAAO,CAACC,GAAG,CACT,sBAAsB,EACtBpB,KAAK,CAACG,UAAU,CAACY,UAAU,CAAC,CAACO,KAC/B,CAAC;QACH;MACF,CAAC,MAAM;QACLtB,KAAK,CAACG,UAAU,CAACO,IAAI,CAACH,OAAO,CAAC;MAChC;;MAEA;;MAEA;MACA;MACA;IACF;EACF,CAAC;;EACDgB,OAAO,EAAE;IACPC,UAAUA,CAAC;MAAEC;IAAO,CAAC,EAAEC,IAAI,EAAE;MAC3BD,MAAM,CAAC,aAAa,EAAEC,IAAI,CAAC;MAC3BP,OAAO,CAACC,GAAG,CAACM,IAAI,CAACC,QAAQ,CAAC;MAC1BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEH,IAAI,CAACI,KAAK,CAAC;MAC7CF,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACC,QAAQ,CAAC;MACnD;IACF,CAAC;;IACDI,YAAYA,CAAC;MAAEN;IAAO,CAAC,EAAEO,SAAS,EAAE;MAClCP,MAAM,CAAC,aAAa,EAAEO,SAAS,CAAC;IAClC,CAAC;IAEDC,UAAUA,CAAC;MAAER;IAAO,CAAC,EAAEC,IAAI,EAAE;MAC3BD,MAAM,CAAC,kBAAkB,EAAEC,IAAI,CAAC;MAChC;MACA;IACF,CAAC;;IACDQ,UAAUA,CAACC,CAAC,EAAE;MAAEjB,EAAE;MAAEX;IAAQ,CAAC,EAAE;MAC7B;MACA;MACA,IAAI,CAACP,KAAK,CAACE,KAAK,CAACkC,MAAM,CAAClB,EAAE,EAAE,CAAC,EAAEX,OAAO,CAAC;IACzC,CAAC;IACD8B,SAASA,CAAC;MAAEZ;IAAO,CAAC,EAAElB,OAAO,EAAE;MAC7BkB,MAAM,CAAC,aAAa,EAAElB,OAAO,CAAC;MAC9B;IACF,CAAC;;IACDH,UAAUA,CAAC;MAAEqB;IAAO,CAAC,EAAElB,OAAO,EAAE;MAC9BY,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEb,OAAO,CAAC;MACjDkB,MAAM,CAAC,iBAAiB,EAAElB,OAAO,CAAC;MAClC;IACF;EACF,CAAC;;EACD+B,OAAO,EAAE;IACPC,OAAOA,CAACvC,KAAK,EAAE;MACb,OAAOA,KAAK,CAACC,QAAQ;IACvB,CAAC;IACDuC,QAAQA,CAACxC,KAAK,EAAE;MACd,OAAOA,KAAK,CAACE,KAAK;IACpB,CAAC;IACDuC,QAAQA,CAACzC,KAAK,EAAE;MACd,OAAOA,KAAK,CAACG,UAAU;IACzB,CAAC;IACDuC,aAAaA,CAAC1C,KAAK,EAAE;MACnB,OAAOA,KAAK,CAACI,UAAU;IACzB;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}