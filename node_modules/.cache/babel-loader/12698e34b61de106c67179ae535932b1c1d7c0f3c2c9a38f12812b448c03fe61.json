{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  state: {\n    isAuthenticated: true,\n    userData: [],\n    tasks: [],\n    addToCarts: [],\n    cartsCount: []\n  },\n  mutations: {\n    CREATE_USER(state, payload) {\n      state.userData = payload;\n      console.log();\n    },\n    CREATE_TASKS(state, task) {\n      state.userData.push(task);\n    },\n    CREATE_TASK_USER(state, formData) {\n      state.tasks.push(formData);\n    },\n    ATT_TO_CART(state, payload) {\n      state.addToCarts.push(...state.tasks.map(item => ({\n        ...item\n      })));\n      console.log(\"cartsCount array after pushing:\", state.addToCarts);\n      // state.addToCarts.push(payload);\n      console.log(\"payload is===>\", payload);\n    },\n    ADD_CARTS_COUNT(state, payload) {\n      let matchedInd = state.addToCarts.findIndex(obj => obj.id === payload.id);\n      if (matchedInd !== -1) {\n        state.addToCarts[matchedInd].quantity = state.addToCarts[matchedInd].quantity + 1;\n        const newPrice = state.addToCarts[matchedInd].price * state.addToCarts[matchedInd].quantity;\n        if (matchedInd < state.cartsCount.length) {\n          state.cartsCount[matchedInd].price = newPrice;\n          //  state.addToCarts[matchedInd].price = newPrice\n        } else {\n          state.cartsCount.push({\n            id: payload.id,\n            price: newPrice,\n            quantity: payload.quantity,\n            title: payload.title,\n            desc: payload.desc\n          });\n        }\n        console.log(\"carts count is ==>\", state.cartsCount);\n      } else {\n        state.cartsCount.push(payload);\n      }\n      console.log(\"action called in payload \", payload);\n    }\n  },\n  actions: {\n    createUser({\n      commit\n    }, form) {\n      commit(\"CREATE_USER\", form);\n      console.log(form.password);\n      localStorage.setItem(\"userEmail\", form.email);\n      localStorage.setItem(\"userPassword\", form.password);\n      // console.log(userData);\n    },\n\n    validateUser({\n      commit\n    }, loginForm) {\n      commit(\"CREATE_USER\", loginForm);\n    },\n    createTask({\n      commit\n    }, form) {\n      commit(\"CREATE_TASK_USER\", form);\n      // localStorage.setItem('formTasks', this.state.tasks);\n      // console.log(localStorage.getItem('formTasks'))\n    },\n\n    updateTask(_, {\n      id,\n      payload\n    }) {\n      this.state.tasks.splice(id, 1, payload);\n    },\n    addToCart({\n      commit\n    }, payload) {\n      commit(\"ATT_TO_CART\", payload);\n      //  console.log(\"payload from action\", payload)\n    },\n\n    cartsCount({\n      commit\n    }, payload) {\n      commit(\"ADD_CARTS_COUNT\", payload);\n    }\n  },\n  getters: {\n    getUser(state) {\n      return state.userData;\n    },\n    getTasks(state) {\n      return state.tasks;\n    },\n    getCarts(state) {\n      return state.addToCarts;\n    },\n    getCartsCount(state) {\n      return state.cartsCount;\n    }\n  }\n};","map":{"version":3,"names":["state","isAuthenticated","userData","tasks","addToCarts","cartsCount","mutations","CREATE_USER","payload","console","log","CREATE_TASKS","task","push","CREATE_TASK_USER","formData","ATT_TO_CART","map","item","ADD_CARTS_COUNT","matchedInd","findIndex","obj","id","quantity","newPrice","price","length","title","desc","actions","createUser","commit","form","password","localStorage","setItem","email","validateUser","loginForm","createTask","updateTask","_","splice","addToCart","getters","getUser","getTasks","getCarts","getCartsCount"],"sources":["D:/Data/Web Development/TECNIQE/15_CRUD_Cart_IN VUE JS/PRODUCT_CRUD_OPERATION/src/store/admin.js"],"sourcesContent":["export default{\r\n\r\n    state: {\r\n      isAuthenticated: true,\r\n        userData: [],\r\n        tasks: [],\r\n        addToCarts: [],\r\n        cartsCount: [],\r\n      },\r\n    \r\n      mutations: {\r\n        CREATE_USER(state, payload) {\r\n          state.userData = payload;\r\n          console.log()\r\n        },\r\n        CREATE_TASKS(state, task) {\r\n          state.userData.push(task);\r\n        },\r\n        CREATE_TASK_USER(state, formData) {\r\n          state.tasks.push(formData);\r\n        },\r\n        ATT_TO_CART(state, payload) {\r\n          state.addToCarts.push(...state.tasks.map(item => ({ ...item })));\r\n          console.log(\"cartsCount array after pushing:\", state.addToCarts);\r\n          // state.addToCarts.push(payload);\r\n          console.log(\"payload is===>\", payload);\r\n        },\r\n        ADD_CARTS_COUNT(state, payload) {\r\n            let matchedInd = state.addToCarts.findIndex(\r\n            (obj) => obj.id === payload.id\r\n          );\r\n          if (matchedInd !== -1) {\r\n                  state.addToCarts[matchedInd].quantity =\r\n                  state.addToCarts[matchedInd].quantity + 1;\r\n                 \r\n                const newPrice = state.addToCarts[matchedInd].price * state.addToCarts[matchedInd].quantity;\r\n                if(matchedInd <state.cartsCount.length){\r\n                    state.cartsCount[matchedInd].price =  newPrice\r\n                  //  state.addToCarts[matchedInd].price = newPrice\r\n                }\r\n                else{\r\n                  state.cartsCount.push({ id: payload.id, price: newPrice, quantity: payload.quantity, title: payload.title, desc: payload.desc });\r\n                }\r\n                console.log(\"carts count is ==>\", state.cartsCount);\r\n          } else {\r\n            state.cartsCount.push(payload);\r\n          }\r\n          console.log(\"action called in payload \", payload);\r\n        },\r\n      },\r\n      actions: {\r\n        createUser({ commit }, form) {\r\n          commit(\"CREATE_USER\", form);\r\n          console.log(form.password);\r\n          localStorage.setItem(\"userEmail\", form.email);\r\n          localStorage.setItem(\"userPassword\", form.password);\r\n          // console.log(userData);\r\n        },\r\n        validateUser({ commit }, loginForm) {\r\n          commit(\"CREATE_USER\", loginForm);\r\n        },\r\n    \r\n        createTask({ commit }, form) {\r\n          commit(\"CREATE_TASK_USER\", form);\r\n          // localStorage.setItem('formTasks', this.state.tasks);\r\n          // console.log(localStorage.getItem('formTasks'))\r\n        },\r\n        updateTask(_, { id, payload }) {\r\n          this.state.tasks.splice(id, 1, payload);\r\n        },\r\n        addToCart({ commit }, payload) {\r\n          commit(\"ATT_TO_CART\", payload);\r\n          //  console.log(\"payload from action\", payload)\r\n        },\r\n        cartsCount({ commit }, payload) {\r\n          commit(\"ADD_CARTS_COUNT\", payload);\r\n        },\r\n      },\r\n      getters: {\r\n        getUser(state) {\r\n          return state.userData;\r\n        },\r\n        getTasks(state) {\r\n          return state.tasks;\r\n        },\r\n        getCarts(state) {\r\n          return state.addToCarts;\r\n        },\r\n        getCartsCount(state) {\r\n          return state.cartsCount;\r\n        },\r\n      },\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}